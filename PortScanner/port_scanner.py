#!usr/bin/python3

import socket
from common_ports import ports_and_services


def get_open_ports(target, port_range, verbose=False):

    target_test = target.split('.', 1)[0]  # part of the target input before first dot
    try:
        int(target_test)
        input_is_ip = True
    except ValueError:
        input_is_ip = False

    open_ports = []  
    for port in range(port_range[0], port_range[-1] + 1):  # +1 to include endpoint
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # socket needs to be in for loop, else Errno 22
        s.settimeout(0.5)  # reducing timeout makes it faster
        try:
            errno = s.connect_ex((target, port))  # returns error if any, else returns 0
            if errno == 0:
                open_ports.append(port)
        except socket.gaierror:
            if input_is_ip: return "Error: Invalid IP address"
            else: return "Error: Invalid hostname"
        try:
            s.shutdown(socket.SHUT_RDWR)  # stops connection to prevent Errno 106
        except OSError as e:
            if e.errno == 107: pass  # then need to catch Errno 107 (not connected)
            else: raise
        s.close()

    if verbose:
        if input_is_ip:
            ip_addr = target
            try:
                host = socket.gethostbyaddr(target)[0]  # returns a triple, only need hostname
            except socket.herror:
                host = ''
        else: 
            host = target
            ip_addr = socket.gethostbyname(target)
        if host:
            string = f'Open ports for {host} ({ip_addr})\nPORT     SERVICE'
        else:
            string = f'Open ports for {ip_addr}\nPORT     SERVICE'

        for port in open_ports:
            string += f'\n{port}' + ' '*(9-len(str(port))) + f'{ports_and_services[port]}'
        return string

    return(open_ports)
