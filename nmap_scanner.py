#!/usr/bin/python3

# inspired by https://github.com/AlexisAhmed/Python3-NmapScanner/blob/master/Scanner.py
# and https://www.pythonpool.com/python-nmap/


import nmap


scanner = nmap.PortScanner()   # instantiate the object
print("Welcome to nmap automation tool")
print("Nmap version:", scanner.nmap_version())

ip_addr = input("IP address of target host/network: ")
scan_type = input(
    "Type of scan to run:\n0) Host discovery\n1) OS detection\n2) Regular\n3) SYN ACK\n4) UDP\n5) Comprehensive\n"
)

if scan_type == '0':  # host discovery
    network = ip_addr + '/24'  # first 24 bits (first 3 numbers) is the network
    scanner.scan(
        network,
        #arguments = '-n -PE -PS443 -PA80 -PP'  # default but without DNS resolution
    )
    for host in scanner.all_hosts():
        print(host, "is", scanner[host].state())

elif scan_type == '1':  # OS detection
    res = scanner.scan(
        ip_addr,
        arguments = '-O'
    )['scan'][ip_addr]['osmatch']
    if res:  # otherwise IndexError if empty
        for i in range(2):
            print(res[i]['name'])
    else: print("Failed to detect OS.")

elif scan_type > '1':
    if scan_type == '2':  # regular scan
        scanner.scan(ip_addr)

    elif scan_type > '2':
        port_range = input(
            "(Range of) ports to be scanned, endpoints separated by dash: "
        )

        if scan_type == '3':  # SYN/ACK scan
            arguments = '-v -sS'  # verbose, simple SYN/ACK

        elif scan_type == '4':  # UDP scan
            arguments = '-v -sU'  # verbose, simple UDP

        elif scan_type == '5':  # comprehensive scan (but gives errors)
            arguments = '-v -sS -sV -sC -A'  # verbose, simple TCP, service fingerprinting, default script, aggressive

        scanner.scan(ip_addr, port_range, arguments)

    print(scanner.scaninfo())  # info about the scan in json, specific to scan_type chosen
    state = scanner[ip_addr].state()
    print(ip_addr, "'s status:", state)  # whether the host is up or down
    if state == 'up':
        protocols = scanner[ip_addr].all_protocols()
        if protocols:  # otherwise KeyError if protocols empty
            print("protocols enabled:", protocols)
            if scan_type == '4':  # UDP scan
                print("open UDP ports:", list(scanner[ip_addr]['udp'].keys()))
            else:
                print("open TCP ports:", list(scanner[ip_addr]['tcp'].keys()))
        else:
            print("protocols enabled: none")
